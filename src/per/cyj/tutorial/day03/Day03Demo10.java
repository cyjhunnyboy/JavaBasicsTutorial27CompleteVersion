package per.cyj.tutorial.day03;

/**
 * 位运算符
 *
 * @author chenyongjun
 * @since 2020-02-06
 */
public class Day03Demo10 {

    /*
        位运算符：
            & | ^ ~
            << >> >>>

        注意：要做位运算，首先要把数据转换为二进制
     */

    public static void main(String[] args) {
        int a = 3;
        int b = 4;

        /*
            分析：因为是位运算，所有我们必须先把数据转换成二进制
            3的二进制：11
            00000000 00000000 00000000 00000011
            4的二进制：100
            00000000 00000000 00000000 00000100

            &位运算：有0则0
                00000000 00000000 00000000 00000011
            &   00000000 00000000 00000000 00000100
            ----------------------------------------
                00000000 00000000 00000000 00000000
            结果是：0

            |位运算：有1则1
                00000000 00000000 00000000 00000011
            |   00000000 00000000 00000000 00000100
            ----------------------------------------
                00000000 00000000 00000000 00000111
            结果是：7

            ^位运算：相同则0，相异则1
                00000000 00000000 00000000 00000011
            ^   00000000 00000000 00000000 00000100
            ----------------------------------------
                00000000 00000000 00000000 00000111
            结果是：7

            ~按位取反运算符：0变1,1变0
                00000000 00000000 00000000 00000011
            ~   11111111 11111111 11111111 11111100 （补码）

           根据补码求原码方法一：
           补码 11111111 11111111 11111111 11111100
           反码 11111111 11111111 11111111 11111011 （减1）
           原码 10000000 00000000 00000000 00000100 （符号位不变，其余各位取反）
           结果是：-4

           根据补码求原码方法二：
           补码 11111111 11111111 11111111 11111100
           反码 10000000 00000000 00000000 00000011 （符号位不变，其余各位取反）
           原码 10000000 00000000 00000000 00000100 （加1）
           结果是：-4
         */
        System.out.println("a & b = " + (a & b));
        System.out.println("a | b = " + (a | b));
        System.out.println("a ^ b = " + (a ^ b));
        System.out.println("~a = " + (~a));
    }
}
